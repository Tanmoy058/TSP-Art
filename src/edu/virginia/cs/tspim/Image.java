package edu.virginia.cs.tspim;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;

import edu.virginia.cs.tspim.gui.MainGui;
import edu.virginia.cs.tspim.util.Util;

public class Image extends JFrame{
	
	class ImageViewer extends JFrame{
		private String title;
		private BufferedImage img = null;
		
		public ImageViewer(String title) {
			super(title);
			this.title = title;
		}
		
		/**
	     * This method is called from within the constructor to initialize the form.
	     * WARNING: Do NOT modify this code. The content of this method is always
	     * regenerated by the Form Editor.
	     */
	    @SuppressWarnings("unchecked")
	    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
	    private ImageViewer initComponents(BufferedImage iconImg) {
	    	this.img = iconImg;
	        jScrollPane1 = new javax.swing.JScrollPane();
	        imageLabel = new javax.swing.JLabel();
	        saveButton = new javax.swing.JButton();
	        closeButton = new javax.swing.JButton();

	        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

	        imageLabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
	        imageLabel.setToolTipText("");
	        imageLabel.setName(""); // NOI18N
	        imageLabel.setIcon(new ImageIcon(iconImg));
	        imageLabel.setPreferredSize(new java.awt.Dimension(width, height));
	        jScrollPane1.setViewportView(imageLabel);

	        saveButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
	        saveButton.setText("Save");
	        saveButton.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                saveButtonActionPerformed(evt);
	            }
	        });

	        closeButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
	        closeButton.setText("Close");
	        closeButton.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                closeButtonActionPerformed(evt);
	            }
	        });

	        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
	        getContentPane().setLayout(layout);
	        layout.setHorizontalGroup(
	            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
	            .addGroup(layout.createSequentialGroup()
	                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
	                .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
	                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
	                .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
	        );
	        layout.setVerticalGroup(
	            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGroup(layout.createSequentialGroup()
	                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 713, Short.MAX_VALUE)
	                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
	                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
	                    .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
	                    .addComponent(closeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
	        );

	        pack();
	        setTitle(title);
	        return this;
	    }// </editor-fold>                        

	    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
	        this.dispose();
	    }                                           

	    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
	        JFileChooser ch = new JFileChooser();
	        ch.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
	        int r = ch.showOpenDialog(this);
	        if(r == JFileChooser.APPROVE_OPTION){
	            File fp = ch.getSelectedFile();
	            if(fp.isDirectory()){
	                fp = new File(fp, this.title + ".jpg");
	            }
	            try {
					Image.this.writeImageToDisk(fp.getAbsolutePath());
				} catch (IOException e1) {
					e1.printStackTrace();
				}
	            dispose();
	        } 
	    }
	    
	 // Variables declaration - do not modify                     
	    private javax.swing.JButton closeButton;
	    private javax.swing.JLabel imageLabel;
	    private javax.swing.JScrollPane jScrollPane1;
	    private javax.swing.JButton saveButton;
	    // End of variables declaration
	}
	int [][] nodes;
	int width;
	int height;
	int scale;
	private String title;
	
	public Image(int width, int height, int scale, String title){
		this.scale = scale;
		this.title = title;
		nodes = new int[height * scale][width *scale];
		this.width = scale * width;
		this.height = scale * height;
		for(int i = 0; i < this.height; i++){
			for(int j = 0; j < this.width; j++){
				nodes[i][j] = 0xffffffff; //Initialize all pixel as White
			}
		}
	}
	
	public void setNodeInImage(Node n){
		nodes[n.getX()][n.getY()] = 0;
	}
	
	public void drawLine(Node a1, Node b1){

//		Util.logln(a);
//		Util.logln(b);
		Node a = new Node(scale * a1.getX(), scale * a1.getY());
		Node b = new Node(scale * b1.getX(), scale * b1.getY());
		int dx = b.getX() - a.getX();
		int dy = b.getY() - a.getY();
		int steps = 0;
		if(Math.abs(dx) > Math.abs(dy)){
			steps = Math.abs(dx);
		}
		else{
			steps = Math.abs(dy);
		}
		double xImcr = (double)dx / steps;
		double yIncr = (double)dy / steps;
		double x = a.getX();
		double y = a.getY();
		for(int i = 0; i < steps; i++){
			Node point = new Node((int)Math.round(x), (int)Math.round(y));
			setNodeInImage(point);
			x += xImcr;
			y += yIncr;
		}
	}
	
	public BufferedImage extractImage(){
		BufferedImage img = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
		for(int i = 0; i < height; i++){
			for(int j = 0; j < width; j++){
				img.setRGB(j, i, nodes[i][j]);
			}
		}
		return img;
	}
	
	public void writeImageToDisk(String path) throws IOException{
		File file = new File(path);
		ImageIO.write(extractImage(), "jpg", file);
	}
	

	public void showImage(){
		this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		BufferedImage iconImage = extractImage();
        new ImageViewer(title).initComponents(iconImage).setVisible(true);;
	}
}
